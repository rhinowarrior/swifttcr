def clustering_main():
    if len(argv) == 2:
        irmsd_values = read_irmsd_values(argv[1])
    elif len(argv) == 3:
        #irmsd_values = read_irmsd_values(argv[1])
        pipeline_dir = argv[1]
        p = Path(pipeline_dir)
        for f in p.iterdir():
            if "_60" in f.stem or "KB" in f.stem or "_120" in f.stem  or "_TCR_" in f.stem or "6mpp_1"and f.is_dir():
                try:
                    fname = "clustering_{}.txt".format(int(argv[2]))
                    fh = open(str(Path(f, fname)), 'w')
                    memberlistname = "member_list_{}.txt".format(int(argv[2]))
                    fm = open(str(Path(f, memberlistname)), 'w')
                    irmsd_values = read_irmsd_values(str(Path(f, 'irmsd.csv')))
                    irmsd_dict = create_dict(irmsd_values, int(argv[2]))
                    if irmsd_dict.keys():
                        clusters = cluster(irmsd_dict)
                        count_dict ={}
                        for key in irmsd_dict.keys():
                            neighbors = 0
                        for (model, _) in irmsd_dict[key]:
                                neighbors += 1
                        count_dict[key] = neighbors
                        for model, neighbors, members in clusters:
                            outline = "Cluster center: {} with {} neighbors.".format(model, neighbors)
                            model_i = model.strip(".pdb").split("_")[1]
                            member_final = "{} {}".format(model_i, members)
                            print(outline)
                            fh.write(outline + "\n")
                            fm.write(member_final + "\n")
                            
                            #print("Members: ", members)
                    else:
                        clusters = []
                    finalline = "Number of clusters found: {}".format( len(clusters))
                    fh.write(finalline)
                    fh.close()
                    fm.close()
                    print(finalline)
                except FileNotFoundError:
                    print("File not found")
    else:
        #irmsd_values = read_irmsd_values('/home/jaarts/pipeline/3sjv_60/irmsd.csv')
        exit(0)
    irmsd_dict = create_dict(irmsd_values)
    clusters = cluster(irmsd_dict)
    count_dict ={}
    for key in irmsd_dict.keys():
            neighbors = 0
            for (model, _) in irmsd_dict[key]:
                    neighbors += 1
            count_dict[key] = neighbors
    for model, neighbors, members in clusters:
        print("Cluster center: {} with {} neighbors.".format(model, neighbors))
        #print("Members: ", members)
    print("Number of clusters found: ", len(clusters))

    
# if __name__=="__main__":
#     clustering_main()


